hydra:
  run:
    dir: ${paths.log_dir}/${task_name}/runs/${now:%Y-%m-%d}_${now:%H-%M-%S}
  sweep:
    dir: ${paths.log_dir}/${task_name}/multiruns/${now:%Y-%m-%d}_${now:%H-%M-%S}
    subdir: ${hydra.job.num}
  launcher:
    _target_: hydra._internal.core_plugins.basic_launcher.BasicLauncher
  sweeper:
    _target_: hydra._internal.core_plugins.basic_sweeper.BasicSweeper
    max_batch_size: null
    params: null
  help:
    app_name: ${hydra.job.name}
    header: '${hydra.help.app_name} is powered by Hydra.

      '
    footer: 'Powered by Hydra (https://hydra.cc)

      Use --hydra-help to view Hydra specific help

      '
    template: '${hydra.help.header}

      == Configuration groups ==

      Compose your configuration from those groups (group=option)


      $APP_CONFIG_GROUPS


      == Config ==

      Override anything in the config (foo.bar=value)


      $CONFIG


      ${hydra.help.footer}

      '
  hydra_help:
    template: 'Hydra (${hydra.runtime.version})

      See https://hydra.cc for more info.


      == Flags ==

      $FLAGS_HELP


      == Configuration groups ==

      Compose your configuration from those groups (For example, append hydra/job_logging=disabled
      to command line)


      $HYDRA_CONFIG_GROUPS


      Use ''--cfg hydra'' to Show the Hydra config.

      '
    hydra_help: ???
  hydra_logging:
    version: 1
    formatters:
      colorlog:
        (): colorlog.ColoredFormatter
        format: '[%(cyan)s%(asctime)s%(reset)s][%(purple)sHYDRA%(reset)s] %(message)s'
    handlers:
      console:
        class: logging.StreamHandler
        formatter: colorlog
        stream: ext://sys.stdout
    root:
      level: INFO
      handlers:
      - console
    disable_existing_loggers: false
  job_logging:
    version: 1
    formatters:
      simple:
        format: '[%(asctime)s][%(name)s][%(levelname)s] - %(message)s'
      colorlog:
        (): colorlog.ColoredFormatter
        format: '[%(cyan)s%(asctime)s%(reset)s][%(blue)s%(name)s%(reset)s][%(log_color)s%(levelname)s%(reset)s]
          - %(message)s'
        log_colors:
          DEBUG: purple
          INFO: green
          WARNING: yellow
          ERROR: red
          CRITICAL: red
    handlers:
      console:
        class: logging.StreamHandler
        formatter: colorlog
        stream: ext://sys.stdout
      file:
        class: logging.FileHandler
        formatter: simple
        filename: ${hydra.job.name}.log
    root:
      level: INFO
      handlers:
      - console
      - file
    disable_existing_loggers: false
  env: {}
  mode: MULTIRUN
  searchpath: []
  callbacks: {}
  output_subdir: .hydra
  overrides:
    hydra:
    - hydra.mode=MULTIRUN
    task:
    - experiment=classification_mixed
  job:
    name: train
    chdir: null
    override_dirname: experiment=classification_mixed
    id: ???
    num: ???
    config_name: train.yaml
    env_set: {}
    env_copy: []
    config:
      override_dirname:
        kv_sep: '='
        item_sep: ','
        exclude_keys: []
  runtime:
    version: 1.2.0
    version_base: '1.2'
    cwd: /local/scratch/a/ko120/Distribution_Matching
    config_sources:
    - path: hydra.conf
      schema: pkg
      provider: hydra
    - path: /local/scratch/a/ko120/Distribution_Matching/configs
      schema: file
      provider: main
    - path: hydra_plugins.hydra_colorlog.conf
      schema: pkg
      provider: hydra-colorlog
    - path: ''
      schema: structured
      provider: schema
    output_dir: ???
    choices:
      local: default.yaml
      hparams_search: null
      debug: null
      experiment: classification_mixed
      hydra: default.yaml
      extras: default.yaml
      paths: default.yaml
      trainer: default.yaml
      logger: wandb.yaml
      callbacks: default.yaml
      model: classification.yaml
      datamodule: classification.yaml
      hydra/env: default
      hydra/callbacks: null
      hydra/job_logging: colorlog
      hydra/hydra_logging: colorlog
      hydra/hydra_help: default
      hydra/help: default
      hydra/sweeper: basic
      hydra/launcher: basic
      hydra/output: default
  verbose: false
task_name: train
tags:
- dev
train: true
test: true
ckpt_path: null
seed: 12345
datamodule:
  _target_: src.datamodules.classification_datamodule.ClassificationDataModule
  dataset_name: adult
  data_dir: ${paths.data_dir}
  batch_size: 64
  test_batch_size: 8
  train_val_test_split:
  - 0.7
  - 0.1
  - 0.2
  num_workers: 0
  pin_memory: false
model:
  _target_: src.models.lightening_module.ClassificationLitModule
  lr: 0.001
  weight_decay: 0.0005
  net:
    _target_: src.models.components.models.SimpleDenseNet
    input_size: 1
    lin1_size: 256
    lin2_size: 256
    lin3_size: 256
    output_size: 1
    use_batchnorm: true
  criterion:
    _target_: src.metrics.train_metrics.ClassificationMixedLoss
    loss_scalers:
      nll: 1
      mmd: 0.2
      sink: 6.0e-05
    operands:
      x: rbf
      'y': rbf
    scalers:
      x: 1.0
      'y': 1.0
    bandwidths:
      x: 10.0
      'y': 0.01
  calibrator:
    _target_: src.calibration.calibration.TemperatureScaling
  kcal_kwargs:
    operands:
      x: rbf
      'y': rbf
    scalers:
      x: 1.0
      'y': 1.0
    bandwidths:
      x: 10.0
      'y': 0.01
callbacks:
  model_checkpoint:
    _target_: pytorch_lightning.callbacks.ModelCheckpoint
    monitor: val/loss
    mode: min
    save_top_k: 1
    save_last: true
    verbose: false
    dirpath: checkpoints/
    filename: epoch_{epoch:03d}
    auto_insert_metric_name: false
  early_stopping:
    _target_: pytorch_lightning.callbacks.EarlyStopping
    monitor: val/loss
    mode: min
    patience: 30
    min_delta: 0
  model_summary:
    _target_: pytorch_lightning.callbacks.RichModelSummary
    max_depth: -1
  rich_progress_bar:
    _target_: pytorch_lightning.callbacks.RichProgressBar
logger:
  wandb:
    _target_: pytorch_lightning.loggers.wandb.WandbLogger
    project: DM_project
    name: ${name}
    save_dir: .
    offline: false
    id: null
    log_model: false
    prefix: ''
    job_type: train
    group: ''
    tags:
    - classification
    - ${name}
    - hparam
    - ${datamodule.dataset_name}
trainer:
  _target_: pytorch_lightning.Trainer
  gpus: 0
  min_epochs: 10
  max_epochs: 200
  resume_from_checkpoint: null
  gradient_clip_val: 0.5
paths:
  root_dir: ${oc.env:PROJECT_ROOT}
  data_dir: ${paths.root_dir}/data/
  log_dir: ${paths.root_dir}/logs/
  output_dir: ${hydra:runtime.output_dir}
  work_dir: ${hydra:runtime.cwd}
extras:
  ignore_warnings: false
  enforce_tags: true
  print_config: true
name: classification_mixed
hparams_search: classification_mixed_optuna.yaml
